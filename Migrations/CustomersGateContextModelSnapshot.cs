// <auto-generated />
using acscustomersgatebackend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using System;

namespace acscustomersgatebackend.Migrations
{
    [DbContext(typeof(CustomersGateContext))]
    partial class CustomersGateContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("acscustomersgatebackend.Models.Order", b =>
                {
                    b.Property<int>("merchant_order_id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("MailSent");

                    b.Property<float>("amount_cents");

                    b.Property<string>("currency");

                    b.Property<bool>("delivery_needed");

                    b.Property<int>("merchant_id");

                    b.Property<int>("shipping_dataId");

                    b.HasKey("merchant_order_id");

                    b.HasIndex("shipping_dataId")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("acscustomersgatebackend.Models.RFQ", b =>
                {
                    b.Property<int>("RFQId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("CompanyArabicName");

                    b.Property<string>("CompanyEnglishName")
                        .IsRequired();

                    b.Property<string>("ContactPersonArabicName");

                    b.Property<string>("ContactPersonEmail")
                        .IsRequired();

                    b.Property<string>("ContactPersonEnglishName")
                        .IsRequired();

                    b.Property<string>("ContactPersonMobile")
                        .IsRequired();

                    b.Property<string>("ContactPersonPosition");

                    b.Property<string>("Location");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("RFQCode");

                    b.Property<string>("SelectedBundle")
                        .IsRequired();

                    b.Property<string>("Status")
                        .IsRequired();

                    b.Property<DateTime>("SubmissionTime");

                    b.Property<string>("TargetedProduct")
                        .IsRequired();

                    b.Property<string>("UniversalIP")
                        .IsRequired();

                    b.Property<string>("Website");

                    b.HasKey("RFQId");

                    b.ToTable("RFQs");
                });

            modelBuilder.Entity("acscustomersgatebackend.Models.RFQAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionCode")
                        .IsRequired();

                    b.Property<DateTime>("ActionTime");

                    b.Property<int>("ActionType");

                    b.Property<string>("Comments")
                        .IsRequired();

                    b.Property<string>("CompanyRepresentative")
                        .IsRequired();

                    b.Property<int>("RFQId");

                    b.Property<DateTime>("SubmissionTime");

                    b.Property<string>("UniversalIP")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RFQId");

                    b.ToTable("RFQAction");
                });

            modelBuilder.Entity("acscustomersgatebackend.Models.ShippingData", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("apartment");

                    b.Property<string>("building");

                    b.Property<string>("city");

                    b.Property<string>("country");

                    b.Property<string>("email");

                    b.Property<string>("first_name");

                    b.Property<string>("floor");

                    b.Property<string>("last_name");

                    b.Property<string>("phone_number");

                    b.Property<string>("postal_code");

                    b.Property<string>("state");

                    b.Property<string>("street");

                    b.HasKey("id");

                    b.ToTable("ShippingData");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("acscustomersgatebackend.Models.Order", b =>
                {
                    b.HasOne("acscustomersgatebackend.Models.ShippingData", "shipping_data")
                        .WithOne("order")
                        .HasForeignKey("acscustomersgatebackend.Models.Order", "shipping_dataId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("acscustomersgatebackend.Models.RFQAction", b =>
                {
                    b.HasOne("acscustomersgatebackend.Models.RFQ", "RFQ")
                        .WithMany("RFQActions")
                        .HasForeignKey("RFQId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
